#!/bin/bash
# Regenerates historical CHANGELOG.md in release-please format

set -e

V1_COMMIT="8f99af1"
OUTPUT_FILE="CHANGELOG.md"
REPO="ncl-icb-analytics/dbt-ncl-analytics"

echo "# Changelog" > $OUTPUT_FILE
echo "" >> $OUTPUT_FILE
echo "All notable changes to this project are documented in this file." >> $OUTPUT_FILE
echo "" >> $OUTPUT_FILE
echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> $OUTPUT_FILE
echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> $OUTPUT_FILE
echo "" >> $OUTPUT_FILE
echo "This changelog is automatically generated by [release-please](https://github.com/googleapis/release-please) based on [Conventional Commits](https://www.conventionalcommits.org/)." >> $OUTPUT_FILE
echo "" >> $OUTPUT_FILE

# Read versions from tags (newest first)
TAGS=$(git tag -l "v*" --sort=-version:refname)

for tag in $TAGS; do
    # Get tag date
    TAG_DATE=$(git log -1 --format=%ai $tag | cut -d' ' -f1)

    # Get commit range for this version
    PREV_TAG=$(git describe --tags --abbrev=0 $tag^ 2>/dev/null || echo "$V1_COMMIT")

    # Create compare URL
    COMPARE_URL="https://github.com/${REPO}/compare/${PREV_TAG}...${tag}"

    # Write version header in release-please format
    echo "## [${tag}](${COMPARE_URL}) (${TAG_DATE})" >> $OUTPUT_FILE
    echo "" >> $OUTPUT_FILE
    echo "" >> $OUTPUT_FILE

    # Get commits by type
    COMMITS=$(git log --format="%H|%s" --no-merges ${PREV_TAG}..${tag})

    # Process features
    FEATURES=$(echo "$COMMITS" | grep -iE "\|feat(\(|:)" || true)
    if [ -n "$FEATURES" ]; then
        echo "### Features" >> $OUTPUT_FILE
        echo "" >> $OUTPUT_FILE
        while IFS='|' read -r sha subject; do
            # Extract PR number if exists
            if [[ $subject =~ \(#([0-9]+)\) ]]; then
                PR_NUM="${BASH_REMATCH[1]}"
                # Remove PR reference from subject
                CLEAN_SUBJECT=$(echo "$subject" | sed -E 's/ \(#[0-9]+\)$//')
                echo "* ${CLEAN_SUBJECT} ([#${PR_NUM}](https://github.com/${REPO}/issues/${PR_NUM})) ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            else
                echo "* ${subject} ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            fi
        done <<< "$FEATURES"
        echo "" >> $OUTPUT_FILE
    fi

    # Process fixes
    FIXES=$(echo "$COMMITS" | grep -iE "\|fix(\(|:)" || true)
    if [ -n "$FIXES" ]; then
        echo "### Bug Fixes" >> $OUTPUT_FILE
        echo "" >> $OUTPUT_FILE
        while IFS='|' read -r sha subject; do
            if [[ $subject =~ \(#([0-9]+)\) ]]; then
                PR_NUM="${BASH_REMATCH[1]}"
                CLEAN_SUBJECT=$(echo "$subject" | sed -E 's/ \(#[0-9]+\)$//')
                echo "* ${CLEAN_SUBJECT} ([#${PR_NUM}](https://github.com/${REPO}/issues/${PR_NUM})) ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            else
                echo "* ${subject} ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            fi
        done <<< "$FIXES"
        echo "" >> $OUTPUT_FILE
    fi

    # Process refactoring (note: release-please uses "Code Refactoring" or just lists them)
    REFACTORS=$(echo "$COMMITS" | grep -iE "\|refactor(\(|:)" || true)
    if [ -n "$REFACTORS" ]; then
        echo "### Code Refactoring" >> $OUTPUT_FILE
        echo "" >> $OUTPUT_FILE
        while IFS='|' read -r sha subject; do
            if [[ $subject =~ \(#([0-9]+)\) ]]; then
                PR_NUM="${BASH_REMATCH[1]}"
                CLEAN_SUBJECT=$(echo "$subject" | sed -E 's/ \(#[0-9]+\)$//')
                echo "* ${CLEAN_SUBJECT} ([#${PR_NUM}](https://github.com/${REPO}/issues/${PR_NUM})) ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            else
                echo "* ${subject} ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            fi
        done <<< "$REFACTORS"
        echo "" >> $OUTPUT_FILE
    fi

    # Process documentation
    DOCS=$(echo "$COMMITS" | grep -iE "\|docs(\(|:)" || true)
    if [ -n "$DOCS" ]; then
        echo "### Documentation" >> $OUTPUT_FILE
        echo "" >> $OUTPUT_FILE
        while IFS='|' read -r sha subject; do
            if [[ $subject =~ \(#([0-9]+)\) ]]; then
                PR_NUM="${BASH_REMATCH[1]}"
                CLEAN_SUBJECT=$(echo "$subject" | sed -E 's/ \(#[0-9]+\)$//')
                echo "* ${CLEAN_SUBJECT} ([#${PR_NUM}](https://github.com/${REPO}/issues/${PR_NUM})) ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            else
                echo "* ${subject} ([${sha:0:7}](https://github.com/${REPO}/commit/${sha}))" >> $OUTPUT_FILE
            fi
        done <<< "$DOCS"
        echo "" >> $OUTPUT_FILE
    fi
done

echo "Historical changelog regenerated in release-please format"
