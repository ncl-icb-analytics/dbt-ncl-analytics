{{
    config(
        materialized='view'
    )
}}

SELECT
CONCAT(GENDER,AGE_BAND_10Y,ETHNICITY_SUBCATEGORY,MAIN_LANGUAGE,BASE.PRACTICE_CODE) AS KEYID,
GENDER,
AGE_BAND_10Y,
AGE_BAND_5Y,
AGE_BAND_5Y_SORT_KEY,
ETHNICITY_CATEGORY,
ETHNICITY_CATEGORY_SORT_KEY,
ETHNICITY_SUBCATEGORY,
MAIN_LANGUAGE,
PATIENT_LSOA,
PATIENT_IMD_QUINTILE_19,
PATIENT_IMD_QUINTILE_19_SORT_KEY,
PATIENT_NEIGHBOURHOOD,
PRACTICE_NEIGHBOURHOOD,
PRACTICE_BOROUGH,
PCN_NAME,
BASE.PRACTICE_CODE,
BASE.PRACTICE_NAME,
PRACTICE_LSOA,
WARD_CODE,
WARD_NAME,
PRACTICE_IMD_QUINTILE_19,
regexp_replace(regexp_replace(regexp_replace(regexp_replace(
        replace(initcap("CONDITION"), '_', ' ')
      , '\\b(COPD)\\b', 'COPD', 1, 0, 'i')
      , '\\b(CYP)\\b', 'CYP', 1, 0, 'i')
      , '\\b(TIA)\\b', 'TIA', 1, 0, 'i')
      , '\\b(NAFLD)\\b', 'NAFLD', 1, 0, 'i')
AS CONDITION_NAME,
IS_ACTIVE,
LISTSIZE.PRACTICE_NORMALISED_WEIGHTED_LIST_SIZE,
SUM(HAS_CONDITION_INT) AS PATIENT_COUNT
FROM
(
SELECT
SEX AS GENDER,
AGE_BAND_10Y,
AGE_BAND_5Y,
CASE WHEN AGE_BAND_5Y = '0-4'THEN 1
    WHEN  AGE_BAND_5Y = '5-9' THEN 2
    WHEN AGE_BAND_5Y = '10-14' THEN 3
    WHEN AGE_BAND_5Y = '15-19' THEN 4
    WHEN AGE_BAND_5Y = '20-24' THEN 5
    WHEN AGE_BAND_5Y = '25-29' THEN 6
    WHEN AGE_BAND_5Y = '30-34' THEN 7
    WHEN AGE_BAND_5Y = '35-39' THEN 8
    WHEN AGE_BAND_5Y = '40-44' THEN 9
    WHEN AGE_BAND_5Y = '45-49' THEN 10
    WHEN AGE_BAND_5Y = '50-54' THEN 11
    WHEN AGE_BAND_5Y = '55-59' THEN 12
    WHEN AGE_BAND_5Y = '60-64' THEN 13
    WHEN AGE_BAND_5Y = '65-69' THEN 14
    WHEN AGE_BAND_5Y = '70-74' THEN 15
    WHEN AGE_BAND_5Y = '75-79' THEN 16
    WHEN AGE_BAND_5Y = '80-84' THEN 17
    WHEN AGE_BAND_5Y = '85+'   THEN 18
        END AS AGE_BAND_5Y_SORT_KEY,
ETHNICITY_CATEGORY,
CASE WHEN ETHNICITY_CATEGORY= 'Asian' THEN 1
        WHEN ETHNICITY_CATEGORY= 'Black' THEN 2
        WHEN ETHNICITY_CATEGORY= 'White' THEN 3
        WHEN ETHNICITY_CATEGORY= 'Mixed' THEN 4
        WHEN ETHNICITY_CATEGORY= 'Other' THEN 5
        WHEN ETHNICITY_CATEGORY= 'Unknown' THEN 6
            END AS ETHNICITY_CATEGORY_SORT_KEY,
ETHNICITY_SUBCATEGORY,
PATIENT_LSOA,
PATIENT_IMD_QUINTILE_19,
CASE WHEN PATIENT_IMD_QUINTILE_19 = 'Least Deprived' THEN 1
        WHEN PATIENT_IMD_QUINTILE_19 = 'Second Least Deprived' THEN 2
        WHEN PATIENT_IMD_QUINTILE_19 = 'Third Most Deprived' THEN 3
        WHEN PATIENT_IMD_QUINTILE_19 = 'Second Most Deprived' THEN 4
        WHEN PATIENT_IMD_QUINTILE_19 = 'Most Deprived' THEN 5
            END AS PATIENT_IMD_QUINTILE_19_SORT_KEY,
NEIGHBOURHOOD_RESIDENT AS PATIENT_NEIGHBOURHOOD,
NEIGHBOURHOOD_REGISTERED AS PRACTICE_NEIGHBOURHOOD,
BOROUGH_REGISTERED AS PRACTICE_BOROUGH,
PCN_NAME,
PRACTICE_CODE,
PRACTICE_NAME,
PRACTICE_LSOA,
WARD_CODE,
WARD_NAME,
PRACTICE_IMD_QUINTILE_19,
MAIN_LANGUAGE,
REPLACE(condition, 'HAS_', '')              AS condition,
has_condition::BOOLEAN                      AS has_condition,
IFF(has_condition, 1, 0)                    AS has_condition_int,
CASE WHEN IS_ACTIVE = 'TRUE' THEN 'Yes' ELSE 'No' END AS IS_ACTIVE
FROM {{ ref('population_health_needs_base') }}
UNPIVOT (has_condition FOR condition IN (
    HAS_ATRIAL_FIBRILLATION,
    HAS_CORONARY_HEART_DISEASE,
    HAS_HEART_FAILURE,
    HAS_HYPERTENSION,
    HAS_PERIPHERAL_ARTERIAL_DISEASE,
    HAS_STROKE_TIA,
    HAS_ASTHMA,
    HAS_COPD,
    HAS_CYP_ASTHMA,
    HAS_DIABETES,
    HAS_GESTATIONAL_DIABETES,
    HAS_NON_DIABETIC_HYPERGLYCAEMIA,
    HAS_OBESITY,
    HAS_NAFLD,
    HAS_DEMENTIA,
    HAS_DEPRESSION,
    HAS_SEVERE_MENTAL_ILLNESS,
    HAS_CANCER,
    HAS_CHRONIC_KIDNEY_DISEASE,
    HAS_EPILEPSY,
    HAS_FAMILIAL_HYPERCHOLESTEROLAEMIA,
    HAS_FRAILTY,
    HAS_LEARNING_DISABILITY,
    HAS_LEARNING_DISABILITY_ALL_AGES,
    HAS_OSTEOPOROSIS,
    HAS_PALLIATIVE_CARE,
    HAS_RHEUMATOID_ARTHRITIS
))) BASE

LEFT JOIN {{ ref('stg_reference_gp_weighted_list_size') }} LISTSIZE
ON BASE.PRACTICE_CODE = LISTSIZE.PRACTICE_CODE

-- WHERE PRACTICE_BOROUGH IN ('Camden','Enfield','Islington','Barnet','Haringey') -- we filter this out in base layer
WHERE HAS_CONDITION = 'TRUE' -- Extract patients with LTC only
GROUP BY ALL